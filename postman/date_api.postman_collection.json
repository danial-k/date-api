{
	"info": {
		"_postman_id": "00ebeed4-3259-4317-8297-8dfc8203ff4e",
		"name": "date_api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get OpenAPI Specification from root",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "091e078a-b0f8-43d0-8389-79f3422e8f3c",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// Check response values",
							"pm.test(\"Array elements contain expected OpenAPI paths\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.paths[\"/range\"].get.operationId).to.eql('getDateRange');",
							"    pm.expect(jsonData.paths[\"/range/offset\"].get.operationId).to.eql('getDateRangeByOffset');",
							"    pm.expect(jsonData.paths[\"/weekStarting\"].get.operationId).to.eql('getDatesByWeekStarting');",
							"    pm.expect(jsonData.paths[\"/weekEnding\"].get.operationId).to.eql('getDatesByWeekEnding');",
							"    pm.expect(jsonData.paths[\"/inMonth\"].get.operationId).to.eql('getDatesInMonthByYear');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/openapi.json",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"openapi.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in a week by week ending",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c979c59a-edfd-4455-8027-c061618934c2",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Check response values",
							"pm.test(\"Array elements contain expected days\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(7);",
							"    pm.expect(jsonData[0]).to.eql(\"2017-12-26\");",
							"    pm.expect(jsonData[6]).to.eql(\"2018-01-01\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/weekEnding?date=2018-01-01",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"weekEnding"
					],
					"query": [
						{
							"key": "date",
							"value": "2018-01-01"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in a week by week beginning",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c1fd5a67-e0d6-4071-908e-b0f3a3ffced4",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Check response values",
							"pm.test(\"Array elements contain expected days\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(7);",
							"    pm.expect(jsonData[0]).to.eql(\"2017-12-28\");",
							"    pm.expect(jsonData[6]).to.eql(\"2018-01-03\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/weekStarting?date=2017-12-28",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"weekStarting"
					],
					"query": [
						{
							"key": "date",
							"value": "2017-12-28"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in a month",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Check response values",
							"pm.test(\"Array elements contain expected days\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(31);",
							"    pm.expect(jsonData[0]).to.eql(\"2018-12-01\");",
							"    pm.expect(jsonData[30]).to.eql(\"2018-12-31\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/inMonth?year=2018&month=12",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"inMonth"
					],
					"query": [
						{
							"key": "year",
							"value": "2018"
						},
						{
							"key": "month",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in a month leap year",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Check response values",
							"pm.test(\"Array elements contain expected days\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(29);",
							"    pm.expect(jsonData[0]).to.eql(\"2020-02-01\");",
							"    pm.expect(jsonData[28]).to.eql(\"2020-02-29\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/inMonth?year=2020&month=2",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"inMonth"
					],
					"query": [
						{
							"key": "year",
							"value": "2020"
						},
						{
							"key": "month",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in a month Invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/inMonth?year=invalid&month=12",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"inMonth"
					],
					"query": [
						{
							"key": "year",
							"value": "invalid"
						},
						{
							"key": "month",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range acceptable",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Check response values",
							"pm.test(\"Array elements contain expected days\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(4);",
							"    pm.expect(jsonData[0]).to.eql(\"2018-01-30\");",
							"    pm.expect(jsonData[1]).to.eql(\"2018-01-31\");",
							"    pm.expect(jsonData[2]).to.eql(\"2018-02-01\");",
							"    pm.expect(jsonData[3]).to.eql(\"2018-02-02\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range?start=2018-01-30&end=2018-02-02",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range"
					],
					"query": [
						{
							"key": "start",
							"value": "2018-01-30"
						},
						{
							"key": "end",
							"value": "2018-02-02"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range invalid start",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range?start=2018-081-30&end=2018-02-02",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range"
					],
					"query": [
						{
							"key": "start",
							"value": "2018-081-30"
						},
						{
							"key": "end",
							"value": "2018-02-02"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range invalid end",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range?start=2018-01-30&end=20183-02-02",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range"
					],
					"query": [
						{
							"key": "start",
							"value": "2018-01-30"
						},
						{
							"key": "end",
							"value": "20183-02-02"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range unacceptable",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range?start=2016-01-30&end=2019-02-02",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range"
					],
					"query": [
						{
							"key": "start",
							"value": "2016-01-30"
						},
						{
							"key": "end",
							"value": "2019-02-02"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range missing end",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range?start=2018-01-30",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range"
					],
					"query": [
						{
							"key": "start",
							"value": "2018-01-30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range missing start",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range?end=2018-01-30",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range"
					],
					"query": [
						{
							"key": "end",
							"value": "2018-01-30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range end before start",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range?start=2018-01-01&end=2017-01-29",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range"
					],
					"query": [
						{
							"key": "start",
							"value": "2018-01-01"
						},
						{
							"key": "end",
							"value": "2017-01-29"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range by offset forward",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Check response values",
							"pm.test(\"Array elements contain expected days\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(3);",
							"    pm.expect(jsonData[0]).to.eql(\"2018-01-30\");",
							"    pm.expect(jsonData[1]).to.eql(\"2018-01-31\");",
							"    pm.expect(jsonData[2]).to.eql(\"2018-02-01\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range/offset?date=2018-01-30&offset=2.8",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range",
						"offset"
					],
					"query": [
						{
							"key": "date",
							"value": "2018-01-30"
						},
						{
							"key": "offset",
							"value": "2.8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range by offset reverse",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Check response values",
							"pm.test(\"Array elements contain expected days\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(3);",
							"    pm.expect(jsonData[0]).to.eql(\"2018-01-28\");",
							"    pm.expect(jsonData[1]).to.eql(\"2018-01-29\");",
							"    pm.expect(jsonData[2]).to.eql(\"2018-01-30\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range/offset?date=2018-01-30&offset=-2.7",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range",
						"offset"
					],
					"query": [
						{
							"key": "date",
							"value": "2018-01-30"
						},
						{
							"key": "offset",
							"value": "-2.7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dates in range by offset invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd29d949-f18f-454d-baaf-5c63f113baa6",
						"exec": [
							"// Check HTTP status code",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Check response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{date_api_host}}/range/offset?date=2018-01-30&offset=error",
					"host": [
						"{{date_api_host}}"
					],
					"path": [
						"range",
						"offset"
					],
					"query": [
						{
							"key": "date",
							"value": "2018-01-30"
						},
						{
							"key": "offset",
							"value": "error"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f516eefd-5748-41e4-bba1-8f3f6d3addc7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d835c5a9-fded-429d-87db-5686123904b6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}